# Starter pipeline
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
      - main
      - features/*
      - feature/*

variables:  
  ARM.ServiceConnection : AZR-NCE-SND1
  ACR.Name: nceapocsbox
  ACR.ResourceGroupName: NCEA-NW-POC
  ACR.ServiceConnection : acr-AZR-NCE-SND1
  ACR.ContainerRepository: defra/ncea-fe

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: 'Build'
  displayName: 'Build FE'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-latest'
      demands:
      - npm

    variables:
      isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
      isPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]
      branchSource: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]
      branch: $[replace(variables['branchSource'], '/', '-')]
      ${{ if ne(variables.isMaster, 'true') }}:
        artifactNameSuffix: _$(branch)
      ${{ else }}:
        artifactNameSuffix: ''
      chartPath: 'NCEA-FRONTEND/helm-charts' 
    steps:
    - task: UseNode@1
      inputs:
        version: '18.x'
      displayName: 'Install Node.js'

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'defra-sonarcloud'
        organization: 'defra'
        scannerMode: CLI
        projectKey: 'DEFRA_ncea-frontend'
        projectName: 'ncea-frontend'
      displayName: 'Prepare analysis on SonarCloud'

    - script: |
        npm install
        npm run build
      displayName: 'npm install and build'

    # - script: |
    #     npm run test
    #   displayName: 'npm test'

    # - task: PublishCodeCoverageResults@1
    #   condition: succeededOrFailed()
    #   inputs:
    #     codeCoverageTool: Cobertura
    #     summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml
    #   displayName: 'Publish code coverage result'

    # - task: SonarCloudAnalyze@1
    #   inputs:
    #     jdkversion: 'JAVA_HOME_17_X64'
    #   displayName: 'Run Code Analysis'

    # - task: SonarCloudPublish@1
    #   inputs:
    #     pollingTimeoutSec: '300'
    #   displayName: 'Publish Quality Gate Result'

    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(ACR.ServiceConnection)

    - task: Docker@2
      displayName: 'Docker Build'
      inputs:
        command: build
        containerRegistry: $(ACR.ServiceConnection)
        repository: $(ACR.ContainerRepository)
        tags: $(Build.BuildId)

    - task: Docker@2
      displayName: 'Docker Push'
      condition: |
        or(
            and(and(succeeded(), eq(variables.isMaster, false)), eq(variables.isPullRequest, false)),
            and(succeeded(), eq(variables.isMaster, true))
          )  
      inputs:
        command: push
        containerRegistry: $(ACR.ServiceConnection)
        repository: $(ACR.ContainerRepository)
        tags: $(Build.BuildId)

    - task: HelmDeploy@0
      displayName: 'Helm Package'  
      inputs:
        command: package
        chartPath: $(chartPath)
        chartVersion: $(Build.SourceBranchName)
        arguments: '--app-version $(Build.SourceBranchName)'
        destination: $(Build.ArtifactStagingDirectory)

    # - task: HelmDeploy@0
    #   displayName: Helm save
    #   inputs:
    #     command: save
    #     chartNameForACR: 'charts/$(ACR.ContainerRepository):$(Build.BuildId)'
    #     chartPathForACR: $(Build.ArtifactStagingDirectory)/$(ACR.ContainerRepository)-$(Build.BuildId).tgz
    #     azureSubscriptionEndpointForACR: $(ACR.ServiceConnection)
    #     azureResourceGroupForACR: $(ACR.ResourceGroupName)
    #     azureContainerRegistry: $(ACR.ContainerRepository)
    
    # - task: AzureCLI@1
    #   inputs:
    #     azureSubscription: $(Arm.ServiceConnection)
    #     scriptLocation: inlineScript
    #     inlineScript: az acr helm push -n $(acrName) $(Build.ArtifactStagingDirectory)/$(ACR.ContainerRepository)-$(Build.BuildId).tgz

# - stage: 'Dev'
#   displayName: 'Deploy to the dev environment'
#   dependsOn: Build
#   condition:  succeeded()
#   jobs:
#   - deployment: Deploy
#     pool:
#       vmImage: 'ubuntu-latest'
#     environment: dev
#     variables:
#     - group: Release
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#             - template: 